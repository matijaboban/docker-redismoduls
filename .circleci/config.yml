version: 2.1

references:
  workspace_root: &workspace_root
    /tmp/workspace
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

orbs:
  docker-publish: circleci/docker-publish@0.1.1

executors:
    node-executor:
      docker:
        - image: circleci/node:8.11.4
          user: root

      environment:
        CC_TEST_REPORTER_ID: 1ce2c894983929f01f1a2e38b99f695de00efa01a38043280c6849761de2578a

      working_directory: ~/project

jobs:
  lint:
    executor: node-executor

    steps:
      - checkout

      - *attach_workspace

      - restore_cache:
          key: npm-dependency-cache-v1-{{ checksum "package-lock.json" }}

      - run:
            name: Install NPM
            command: |
                npm install

      - save_cache:
          key: npm-dependency-cache-v1-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules

      - run:
          name: Run linting
          command: npm run lint

  test:
    docker:
      - image: python:3.7.1
      - image: matijaboban/docker-redismoduls:$CIRCLE_SHA1

    working_directory: /project

    steps:
      - *attach_workspace

      - checkout

      - run: |
          apt-get update && apt-get install -y curl

      - run:
          name: Install goss
          command: |
            curl -fsSL https://goss.rocks/install | sh
            goss -version

      - run: |
          apt-get update && apt-get install -y redis-tools
          echo "CONFIG SET save ''" | redis-cli -x

      - run: redis-cli info

      - run:
          name: Test goss
          command: goss validate

  build-redis:
    docker:
      - image: python:3.7.1

    working_directory: ~/project

    steps:
      - *attach_workspace

      - run:
          name: Install Dependencies
          command: |
            apt-get update
            apt-get install -y cmake

      - run:
          name: Create workspace directory
          command: |
            mkdir -p /tmp/workspace/redis/core

      - run:
          name: Get module tag from Github
          command: |
            curl -OL https://github.com/antirez/redis/archive/5.0.2.tar.gz
            tar xzf *.tar.gz


# disable Redis protected mode [1] as it is unnecessary in context of Docker
# (ports are not automatically exposed when running inside Docker, but rather explicitly by specifying -p / -P)
# [1]: https://github.com/antirez/redis/commit/edd4d555df57dc84265fdfb4ef59a4678832f6da
  # grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 1$' /usr/src/redis/src/server.h; \
  # sed -ri 's!^(#define CONFIG_DEFAULT_PROTECTED_MODE) 1$!\1 0!' /usr/src/redis/src/server.h; \
  # grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 0$' /usr/src/redis/src/server.h; \

      - run:
          name: Pre-build updates
          command: |
            grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 1$' ~/project/r*/src/server.h
            sed -ri 's!^(#define CONFIG_DEFAULT_PROTECTED_MODE) 1$!\1 0!' ~/project/r*/src/server.h
            grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 0$' ~/project/r*/src/server.h

      - run:
          name: Build redis core
          command: |
            cd ~/project/r*
            make

      - run:
          name: Test redis core
          command: |
            cd ~/project/r*
            make test

      - run:
          name: Test redis sentinel
          command: |
            cd ~/project/r*
            sh runtest
            sh runtest-sentinel

      - run:
          name: Move compiled assets to workspace
          command: |
            cd ~/project/r*
            cp src/redis-benchmark /tmp/workspace/redis/core/
            cp src/redis-check-aof /tmp/workspace/redis/core/
            cp src/redis-check-rdb /tmp/workspace/redis/core/
            cp src/redis-cli /tmp/workspace/redis/core/
            cp src/redis-sentinel /tmp/workspace/redis/core/
            cp src/redis-server /tmp/workspace/redis/core/
            cp redis.conf /tmp/workspace/redis/core/
            cp sentinel.conf /tmp/workspace/redis/core/

      # - run: |
      #     echo "build-redis"

      # - run: mkdir -p /tmp/workspace/redis/core
      # - run: echo "build-redis!" > /tmp/workspace/redis/core/echo-output.txt

      # - run: |
      #     ls
      #     cd /tmp/workspace
      #     ls

      # Persist the specified paths (workspace/echo-output) into the workspace for use in downstream job.
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: *workspace_root
          # Must be relative path from root
          paths:
            - redis

  build-redisearch:
    docker:
      - image: python:3.7.1

    working_directory: ~/project

    steps:
      - *attach_workspace

      - run:
          name: Install Dependencies
          command: |
            apt-get update
            apt-get install -y cmake

      - run:
          name: Create workspace directory
          command: |
            mkdir -p /tmp/workspace/redis/modules

      - run:
          name: Get module tag from Github
          command: |
            curl -OL https://github.com/RedisLabsModules/RediSearch/archive/v1.4.2.tar.gz
            tar xzf *.tar.gz

      - run:
          name: Build module
          command: |
            cd ~/project/R*
            mkdir build
            cd build
            cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo
            make
            cp *.so /tmp/workspace/redis/modules/

      - persist_to_workspace:
          root: *workspace_root
          paths:
            - redis

  build-redisml:
    docker:
      - image: python:3.7.1

    working_directory: ~/project

    steps:
      - *attach_workspace

      - run:
          name: Install Dependencies
          command: |
            apt-get update
            apt-get install -y cmake
            apt-get install -y zip
            apt-get install -y libatlas-base-dev

      - run:
          name: Create workspace directory
          command: |
            mkdir -p /tmp/workspace/redis/modules

      - run:
          name: Get module tag from Github
          command: |
            curl -OL https://github.com/RedisLabsModules/redis-ml/archive/master.zip
            unzip *.zip


      - run:
          name: Build module
          command: |
            cd ~/project/r*/src
            make
            cp *.so /tmp/workspace/redis/modules/

      - persist_to_workspace:
          root: *workspace_root
          paths:
            - redis

  build-redisbloom:
    docker:
      - image: python:3.7.1

    working_directory: ~/project

    steps:
      - *attach_workspace

      - run:
          name: Install Dependencies
          command: |
            apt-get update
            apt-get install -y zip

      - run:
          name: Create workspace directory
          command: |
            mkdir -p /tmp/workspace/redis/modules

      - run:
          name: Get module tag from Github
          command: |
            curl -OL https://github.com/RedisLabsModules/rebloom/archive/master.zip
            unzip *.zip

      - run:
          name: Build module
          command: |
            cd ~/project/r*
            make
            cp *.so /tmp/workspace/redis/modules/

      - persist_to_workspace:
          root: *workspace_root
          paths:
            - redis

  build-rejson:
    docker:
      - image: python:3.7.1

    working_directory: ~/project

    steps:
      - *attach_workspace

      - run:
          name: Install Dependencies
          command: |
            apt-get update
            apt-get install -y zip
            apt-get install -y build-essential

      - run:
          name: Create workspace directory
          command: |
            mkdir -p /tmp/workspace/redis/modules

      - run:
          name: Get module tag from Github
          command: |
            curl -OL https://github.com/RedisLabsModules/rejson/archive/master.zip
            unzip *.zip

      - run:
          name: Build module
          command: |
            cd ~/project/r*/src
            make
            cp *.so /tmp/workspace/redis/modules/

      - persist_to_workspace:
          root: *workspace_root
          paths:
            - redis

  build-timeseries:
    docker:
      - image: python:3.7.1

    working_directory: ~/project

    steps:
      - *attach_workspace

      - run:
          name: Install Dependencies
          command: |
            apt-get update
            apt-get install -y zip

      - run:
          name: Create workspace directory
          command: |
            mkdir -p /tmp/workspace/redis/modules

      - run:
          name: Get module tag from Github
          command: |
            curl -OL https://github.com/RedisLabsModules/redis-timeseries/archive/master.zip
            unzip *.zip

      - run:
          name: Get utility SDK from Github
          command: |
            cd r*/RedisModulesSDK/
            curl -OL https://github.com/RedisLabs/RedisModulesSDK/archive/master.zip
            unzip *.zip
            mv R*/* .

      - run:
          name: Build module
          command: |
            cd ~/project/r*/src
            make
            cp *.so /tmp/workspace/redis/modules/

      - persist_to_workspace:
          root: *workspace_root
          paths:
            - redis

  build-redex:
    docker:
      - image: python:3.7.1

    working_directory: ~/project

    steps:
      - *attach_workspace

      - run:
          name: Install Dependencies
          command: |
            apt-get update
            apt-get install -y zip

      - run:
          name: Create workspace directory
          command: |
            mkdir -p /tmp/workspace/redis/modules

      - run:
          name: Get module tag from Github
          command: |
            curl -OL https://github.com/RedisLabsModules/redex/archive/master.zip
            unzip *.zip

      - run:
          name: Build module
          command: |
            cd ~/project/r*
            make
            cd src
            cp *.so /tmp/workspace/redis/modules/

      - persist_to_workspace:
          root: *workspace_root
          paths:
            - redis

  build-redisgraph:
    docker:
      - image: python:3.7.1

    working_directory: ~/project

    steps:
      - *attach_workspace

      - run:
          name: Install Dependencies
          command: |
            apt-get update
            apt-get install -y build-essential
            apt-get install -y cmake

      - run:
          name: Create workspace directory
          command: |
            mkdir -p /tmp/workspace/redis/modules

      - run:
          name: Get module tag from Github
          command: |
            curl -OL https://github.com/RedisLabsModules/RedisGraph/archive/v1.0.2.tar.gz
            tar xzf *.tar.gz

      - run:
          name: Build module
          command: |
            cd ~/project/R*
            make
            cp src/*.so /tmp/workspace/redis/modules/

      - persist_to_workspace:
          root: *workspace_root
          paths:
            - redis


  temptest:
    docker:
      - image: python:3.7.1

    working_directory: /project

    steps:
      - *attach_workspace

      - run: |
          echo "temptest"
          ls

      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: /project/workspace

      - run: |
          cd workspace/redis
          ls
          cd core
          ls
          cd ../modules
          ls

      # - run: cat /project/workspace/echo-output


  # test:
  #   build:
  #     docker:
  #       - image: matijaboban/docker-redismoduls:$CIRCLE_SHA1

  #     steps:
  #       - run:
  #           name: Install goss
  #           command: |
  #             # rather than give internet scripts SU rights, we install to local user bin and add to path
  #             mkdir ~/bin
  #             export GOSS_DST=~/bin
  #             export PATH=$PATH:~/bin
  #             curl -fsSL https://goss.rocks/install | sh
  #             goss -version

      # - docker-publish/publish:
      #     after_checkout:
      #       - run:
      #           name: Do this after checkout.
      #           command: echo "Did this after checkout"
      #     before_build:
      #       - run:
      #           name: Do this before the build.
      #           command: echo "Did this before the build"
      #     after_build:
      #       - run:
      #           name: Do this after the build.
      #           command: echo "Did this after the build"

  # build:

  #   steps:

  #     - run:
  #       name: Do this after checkout.
  #       command: echo "test"

  #     # - docker-publish/check
  #     #
  #     #
  #     - dockerprocess/publish


      # - docker-publish/publish:
      #   after_checkout:
      #     - run:
      #         name: Do this after checkout.
      #         command: echo "Did this after checkout"
      #   before_build:
      #     - run:
      #         name: Do this before the build.
      #         command: echo "Did this before the build"
      #   after_build:
      #     - run:
      #         name: Do this after the build.
      #         command: echo "Did this after the build"
    # executor: node-executor
    # - docker-publish/check

workflows:
  version: 2.1

  # docker_with_lifecycle:
  #   jobs:
      # steps:

      #   - checkout

      #   - docker-publish/publish:
      #       after_checkout:
      #         - run:
      #             name: Do this after checkout.
      #             command: echo "Did this after checkout"
      #       before_build:
      #         - run:
      #             name: Do this before the build.
      #             command: echo "Did this before the build"
      #         - run:
      #             name: docker-publish/check.
      #             command: docker-publish/check
      #       after_build:
      #         - run:
      #             name: Do this after the build.
      #             command: echo "Did this after the build"

  pre-build:
    jobs:
      - lint
      - build-redis:
          requires:
            - lint
      - build-redisearch:
          requires:
            - lint
      - build-redisml:
          requires:
            - lint
      - build-redisbloom:
          requires:
            - lint
      - build-rejson:
          requires:
            - lint
      - build-timeseries:
          requires:
            - lint
      - build-redex:
          requires:
            - lint
      - build-redisgraph:
          requires:
            - lint

      - temptest:
          requires:
            - build-redis
            - build-redisearch
            - build-redisml
            - build-redisbloom
            - build-rejson
            - build-timeseries
            - build-redex
            - build-redisgraph

      # - docker-publish/publish:
      #     requires:
      #       - lint
      # - test:
      #     requires:
      #       - docker-publish/publish

      # - build
      # - docker-publish/check
          # requires:
            # - lint

