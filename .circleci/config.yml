version: 2.1


CC_TEST_REPORTER_ID:


references:
  workspace_root: &workspace_root
    /tmp/workspace
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

orbs:
  docker-publish: circleci/docker-publish@0.1.1

executors:
    node-executor:
      docker:
        - image: circleci/node:10.14.1-browsers
          user: root

      environment:
        CC_TEST_REPORTER_ID: 1ce2c894983929f01f1a2e38b99f695de00efa01a38043280c6849761de2578a

      working_directory: ~/project

    alpine-executor:
      docker:
        - image: alpine:3.8
          user: root

      working_directory: ~/project

commands:
  alpine-executor-setup-dependencies:
    description: "Alpine image dependencies install"
    steps:
      - run:
          command: |
            apk add zip
            apk add curl
            apk add coreutils
            apk add gcc
            apk add jemalloc-dev
            apk add linux-headers
            apk add make
            apk add cmake
            apk add g++
            apk add musl-dev

  libs-external-get:
    description: "TBA"
    parameters:
      lib-github-org:
        type: string
        default: "RedisLabsModules"
      lib-name:
        type: string
        default: "rejson"
      lib-release:
        type: string
        default: "08b10ce3045f9b24cf69ae00d25bee18f8807154"
      lib-release-package-extension:
        type: string
        default: "zip"
    steps:
      - restore_cache:
          key: external-dependencies-package-cache-v1-<< parameters.lib-name >>-<< parameters.lib-release >>

      - run:
          name: Get << parameters.lib-name >> tag from Github
          command: |
            test -e build/download/<< parameters.lib-name >>.<< parameters.lib-release-package-extension >> \
            && echo file exists, skipping \
            || \
            wget -O build/download/<< parameters.lib-name >>.<< parameters.lib-release-package-extension >> https://github.com/<< parameters.lib-github-org >>/<< parameters.lib-name >>/archive/<< parameters.lib-release >>.<< parameters.lib-release-package-extension >>

      - save_cache:
          key: external-dependencies-package-cache-v1-<< parameters.lib-name >>-<< parameters.lib-release >>
          paths:
            - build/download/<< parameters.lib-name >>.<< parameters.lib-release-package-extension >>




jobs:
  lint:
    executor: node-executor

    steps:
      - checkout

      - *attach_workspace

      - restore_cache:
          keys:
            - npm-dependencies-cache-v1-{{ checksum "package-lock.json" }}
            - npm-dependencies-cache-v1-

      - run:
            name: Install NPM
            command: |
                npm install

      - save_cache:
          key: npm-dependencies-cache-v1-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules

      - run:
          name: Run linting
          command: npm run lint


      # - restore_cache:
      #     key: external-dependencies-cache-v1-rejson-08b10ce3045f9b24cf69ae00d25bee18f8807154

      # - run:
      #     name: Get module tag from Github
      #     command: |
      #       test -e build/download/rejson.zip \
      #       && echo file exists, skipping \
      #       || \
      #       wget -O build/download/rejson.zip https://github.com/RedisLabsModules/rejson/archive/08b10ce3045f9b24cf69ae00d25bee18f8807154.zip

      # - save_cache:
      #     key: external-dependencies-cache-v1-rejson-08b10ce3045f9b24cf69ae00d25bee18f8807154
      #     paths:
      #       - build/download/rejson.zip

      - libs-external-get:
          lib-github-org: antirez
          lib-name: redis
          lib-release: 5.0.2

      - libs-external-get

      - libs-external-get:
          lib-name: RediSearch
          lib-release: v1.4.2

      - libs-external-get:
          lib-name: RedisGraph
          lib-release: v1.0.4

      - libs-external-get:
          lib-name: redis-ml
          lib-release: 9bc5814ab3fcc8ea33edd0c060c0f84eead05c28

      - libs-external-get:
          lib-name: rebloom
          lib-release: 955989f38778916f1bde0dc6998626333233d283

      - run:
          name: temp exit
          command: |
            ls build/download/

            exit 2
  test:
    docker:
      - image: python:3.7.1
      - image: matijaboban/docker-redismoduls:$CIRCLE_SHA1

    working_directory: /project

    steps:
      - *attach_workspace

      - checkout

      - run: |
          apt-get update && apt-get install -y curl

      - run:
          name: Install goss
          command: |
            curl -fsSL https://goss.rocks/install | sh
            goss -version

      - run: |
          apt-get update && apt-get install -y redis-tools
          echo "CONFIG SET save ''" | redis-cli -x

      - run: redis-cli info

      - run:
          name: Test goss
          command: goss validate

  build-redis:
    executor: alpine-executor

    steps:

      # - run:
      #     name: add user and group for consistent id assigned
      #     command: |
      #       addgroup -S circleci && adduser -S -G circleci circleci

      # - *attach_workspace

      - alpine-executor-setup-dependencies

    #   - *attach_workspace

      # - run:
      #     name: Install Dependencies
      #     command: |
      #       apt-get update
      #       apt-get install -y cmake

      - run:
          name: Create workspace directory
          command: |
            mkdir -p /tmp/workspace/build/redis/core

      - run:
          name: Get module tag from Github
          command: |
            curl -OL https://github.com/antirez/redis/archive/5.0.2.tar.gz
            tar xzf *.tar.gz


    # disable Redis protected mode [1] as it is unnecessary in context of Docker
    # (ports are not automatically exposed when running inside Docker, but rather explicitly by specifying -p / -P)
    # [1]: https://github.com/antirez/redis/commit/edd4d555df57dc84265fdfb4ef59a4678832f6da
      # grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 1$' /usr/src/redis/src/server.h; \
      # sed -ri 's!^(#define CONFIG_DEFAULT_PROTECTED_MODE) 1$!\1 0!' /usr/src/redis/src/server.h; \
      # grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 0$' /usr/src/redis/src/server.h; \

      - run:
          name: Pre-build updates
          command: |
            grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 1$' ~/project/r*/src/server.h
            sed -ri 's!^(#define CONFIG_DEFAULT_PROTECTED_MODE) 1$!\1 0!' ~/project/r*/src/server.h
            grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 0$' ~/project/r*/src/server.h

      - run:
          name: Build redis core
          command: |
            cd ~/project/r*
            make

      # - run:
      #     name: Test redis core
      #     command: |
      #       cd ~/project/r*
      #       make test

      # - run:
      #     name: Test redis sentinel
      #     command: |
      #       cd ~/project/r*
      #       sh runtest
      #       sh runtest-sentinel

      # - run:
      #     name: Move compiled assets to workspace
      #     command: |
      #       cd ~/project/r*
      #       cp src/redis-benchmark ~/project/build/redis/core/
      #       cp src/redis-check-aof ~/project/build/redis/core/
      #       cp src/redis-check-rdb ~/project/build/redis/core/
      #       cp src/redis-cli ~/project/build/redis/core/
      #       cp src/redis-sentinel ~/project/build/redis/core/
      #       cp src/redis-server ~/project/build/redis/core/
      #       cp redis.conf ~/project/build/redis/core/
      #       cp sentinel.conf ~/project/build/redis/core/

      - run:
          name: Make install and move
          command: |
            cd ~/project/
            tar -czvf /tmp/workspace/build/redis/core/core.tar.gz  r*/


      # - run: |
      #     echo "build-redis"

      # - run: mkdir -p ~/project/build/redis/core
      # - run: echo "build-redis!" > ~/project/build/redis/core/echo-output.txt

      # - run: |
      #     ls
      #     cd ~/project/build
      #     ls

      # Persist the specified paths (workspace/echo-output) into the workspace for use in downstream job.
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: *workspace_root
          # Must be relative path from root
          paths:
            - build

  build-redisearch:
    executor: alpine-executor

    steps:
      # - run:
      #     name: add user and group for consistent id assigned
      #     command: |
      #       addgroup -S circleci && adduser -S -G circleci circleci

      # - *attach_workspace

      - alpine-executor-setup-dependencies

      - run:
          name: Create workspace directory
          command: |
            mkdir -p /tmp/cache/build/redis/modules
            mkdir -p /tmp/workspace/build/redis/modules

      - run:
          name: Get module tag from Github
          command: |
            curl -OL https://github.com/RedisLabsModules/RediSearch/archive/v1.4.2.tar.gz
            tar xzf *.tar.gz

      - run:
          name: Build module
          command: |
            cd ~/project/R*
            mkdir build
            cd build
            cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo
            make
            cp *.so /tmp/workspace/build/redis/modules/

      - persist_to_workspace:
          root: *workspace_root
          paths:
            - build

  build-redisml:
    docker:
      - image: python:3.7.1

    working_directory: ~/project

    steps:
      - *attach_workspace

      - run:
          name: Install Dependencies
          command: |
            apt-get update
            apt-get install -y cmake
            apt-get install -y zip
            apt-get install -y libatlas-base-dev

      - run:
          name: Create workspace directory
          command: |
            mkdir -p ~/project/build/redis/modules

      - run:
          name: Get module tag from Github
          command: |
            curl -OL https://github.com/RedisLabsModules/redis-ml/archive/master.zip
            unzip *.zip


      - run:
          name: Build module
          command: |
            cd ~/project/r*/src
            make
            cp *.so ~/project/build/redis/modules/

      - persist_to_workspace:
          root: *workspace_root
          paths:
            - redis

  build-redisbloom:
    docker:
      - image: python:3.7.1

    working_directory: ~/project

    steps:
      - *attach_workspace

      - run:
          name: Install Dependencies
          command: |
            apt-get update
            apt-get install -y zip

      - run:
          name: Create workspace directory
          command: |
            mkdir -p ~/project/build/redis/modules

      - run:
          name: Get module tag from Github
          command: |
            curl -OL https://github.com/RedisLabsModules/rebloom/archive/master.zip
            unzip *.zip

      - run:
          name: Build module
          command: |
            cd ~/project/r*
            make
            cp *.so ~/project/build/redis/modules/

      - persist_to_workspace:
          root: *workspace_root
          paths:
            - redis

  build-rejson:
    executor: alpine-executor

    steps:
      # - run:
      #     name: add user and group for consistent id assigned
      #     command: |
      #       addgroup -S circleci && adduser -S -G circleci circleci

      # - *attach_workspace

      - alpine-executor-setup-dependencies


      - run:
          name: Create workspace directory
          command: |
            mkdir -p /tmp/workspace/build/redis/modules

      - restore_cache:
          keys:
            - v03-rejson--08b10ce3045f9b24cf69ae00d25bee18f8807154

      - run:
          name: Build module
          command: |
            pwd
            ls

      - run:
          name: Get module tag from Github
          command: |
            wget -O rejson.zip https://github.com/RedisLabsModules/rejson/archive/08b10ce3045f9b24cf69ae00d25bee18f8807154.zip
            unzip *.zip
            rm *.zip
            mv r* rejson

      - run:
          name: Build module
          command: |
            pwd
            ls
            cd ~/project/rejson/src
            make

      # - run:
      #     name: Perm
      #     command: |
      #       chmod -R 777 /cache/build/redis/modules

      - save_cache:
          key: v03-rejson--08b10ce3045f9b24cf69ae00d25bee18f8807154
          paths:
            - rejson/src/rejson.so

      - run:
          name: Copy compiled module to workspace
          command: |
            cp ~/project/r*/src/*.so /tmp/workspace/build/redis/modules/

      - persist_to_workspace:
          root: *workspace_root
          paths:
            - build

  build-timeseries:
    docker:
      - image: python:3.7.1

    working_directory: ~/project

    steps:
      - *attach_workspace

      - run:
          name: Install Dependencies
          command: |
            apt-get update
            apt-get install -y zip

      - run:
          name: Create workspace directory
          command: |
            mkdir -p ~/project/build/redis/modules

      - run:
          name: Get module tag from Github
          command: |
            curl -OL https://github.com/RedisLabsModules/redis-timeseries/archive/master.zip
            unzip *.zip

      - run:
          name: Get utility SDK from Github
          command: |
            cd r*/RedisModulesSDK/
            curl -OL https://github.com/RedisLabs/RedisModulesSDK/archive/master.zip
            unzip *.zip
            mv R*/* .

      - run:
          name: Build module
          command: |
            cd ~/project/r*/src
            make
            cp *.so ~/project/build/redis/modules/

      - persist_to_workspace:
          root: *workspace_root
          paths:
            - redis

  build-redex:
    docker:
      - image: python:3.7.1

    working_directory: ~/project

    steps:
      - *attach_workspace

      - run:
          name: Install Dependencies
          command: |
            apt-get update
            apt-get install -y zip

      - run:
          name: Create workspace directory
          command: |
            mkdir -p ~/project/build/redis/modules

      - run:
          name: Get module tag from Github
          command: |
            curl -OL https://github.com/RedisLabsModules/redex/archive/master.zip
            unzip *.zip

      - run:
          name: Build module
          command: |
            cd ~/project/r*
            make
            cd src
            cp *.so ~/project/build/redis/modules/

      - persist_to_workspace:
          root: *workspace_root
          paths:
            - redis

  build-redisgraph:
    docker:
      - image: python:3.7.1

    working_directory: ~/project

    steps:
      - *attach_workspace

      - run:
          name: Install Dependencies
          command: |
            apt-get update
            apt-get install -y build-essential
            apt-get install -y cmake

      - run:
          name: Create workspace directory
          command: |
            mkdir -p ~/project/build/redis/modules

      - run:
          name: Get module tag from Github
          command: |
            curl -OL https://github.com/RedisLabsModules/RedisGraph/archive/v1.0.2.tar.gz
            tar xzf *.tar.gz

      - run:
          name: Build module
          command: |
            cd ~/project/R*
            make
            cp src/*.so ~/project/build/redis/modules/

      - persist_to_workspace:
          root: *workspace_root
          paths:
            - redis


  temptest:
    docker:
      - image: python:3.7.1

    working_directory: ~/project

    steps:
      - *attach_workspace

      - run: |
          echo "temptest"
          ls

      # - attach_workspace:
      #     # Must be absolute path or relative path from working_directory
      #     at: /project/workspace

      - run: |
          cd ~/project/build/redis
          ls
          cd core
          ls
          cd ../modules
          ls

      # - run: cat /project/workspace/echo-output


  build-docker:
    docker:
      - image: python:3.7.1

    working_directory: ~/project

    steps:
      - checkout

      - *attach_workspace

      - run:
          name: Check Environment Variables
          command: |
            if [[ -z "${DOCKER_LOGIN}" ]]; then
              echo "DOCKER_LOGIN is not set, will not be able to push image."
              exit 1
            fi

            if [[ -z "${DOCKER_PASSWORD}" ]]; then
              echo "DOCKER_PASSWORD is not set, will not be able to push image."
              exit 1
            fi

      - run:
          name: Docker Login
          command: docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD docker.io

      - run: |
          cd ~/project/build/redis
          ls
          cd core
          ls
          cd ../modules
          ls

      # - run: cat /project/workspace/echo-output



  # test:
  #   build:
  #     docker:
  #       - image: matijaboban/docker-redismoduls:$CIRCLE_SHA1

  #     steps:
  #       - run:
  #           name: Install goss
  #           command: |
  #             # rather than give internet scripts SU rights, we install to local user bin and add to path
  #             mkdir ~/bin
  #             export GOSS_DST=~/bin
  #             export PATH=$PATH:~/bin
  #             curl -fsSL https://goss.rocks/install | sh
  #             goss -version

      # - docker-publish/publish:
      #     after_checkout:
      #       - run:
      #           name: Do this after checkout.
      #           command: echo "Did this after checkout"
      #     before_build:
      #       - run:
      #           name: Do this before the build.
      #           command: echo "Did this before the build"
      #     after_build:
      #       - run:
      #           name: Do this after the build.
      #           command: echo "Did this after the build"

  # build:

  #   steps:

  #     - run:
  #       name: Do this after checkout.
  #       command: echo "test"

  #     # - docker-publish/check
  #     #
  #     #
  #     - dockerprocess/publish


      # - docker-publish/publish:
      #   after_checkout:
      #     - run:
      #         name: Do this after checkout.
      #         command: echo "Did this after checkout"
      #   before_build:
      #     - run:
      #         name: Do this before the build.
      #         command: echo "Did this before the build"
      #   after_build:
      #     - run:
      #         name: Do this after the build.
      #         command: echo "Did this after the build"
    # executor: node-executor
    # - docker-publish/check

workflows:
  version: 2.1

  # docker_with_lifecycle:
  #   jobs:
      # steps:

      #   - checkout

      #   - docker-publish/publish:
      #       after_checkout:
      #         - run:
      #             name: Do this after checkout.
      #             command: echo "Did this after checkout"
      #       before_build:
      #         - run:
      #             name: Do this before the build.
      #             command: echo "Did this before the build"
      #         - run:
      #             name: docker-publish/check.
      #             command: docker-publish/check
      #       after_build:
      #         - run:
      #             name: Do this after the build.
      #             command: echo "Did this after the build"

  pre-build:
    jobs:
      - lint
      - build-redis:
          requires:
            - lint
      - build-redisearch:
          requires:
            - lint
      # - build-redisml:
      #     requires:
      #       - lint
      # - build-redisbloom:
      #     requires:
      #       - lint
      - build-rejson:
          requires:
            - lint
      # - build-timeseries:
      #     requires:
      #       - lint
      # - build-redex:
      #     requires:
      #       - lint
      # - build-redisgraph:
      #     requires:
      #       - lint

      # - temptest:
          # requires:
            # - build-redis
            # - build-redisearch
            # - build-redisml
            # - build-redisbloom
            # - build-rejson
            # - build-timeseries
            # - build-redex
            # - build-redisgraph

      # - build-docker:
      #     requires:
      #       - temptest


      - docker-publish/publish:
          requires:
            - build-redis
            - build-redisearch
            # - build-redisml
            - build-rejson
          after_checkout:
            - *attach_workspace

            - run:
                name: location
                command: |
                  cd /tmp/workspace/
                  pwd
                  ls

            # - run:
            #     name: Create workspace directory
            #     command: |
            #       mkdir -p ~/project/build/redis/modules
            #
            # - run:
            #     name: Create workspace directory
            #     command: |
            #       mkdir -p ~/project/build/redis/modules
            #
            # - run:
            #     name: Create workspace directory
            #     command: |
            #       sudo mkdir -p /tmp/workspace/build/redis/modules

            # - restore_cache:
            #     keys:
            #       - v1-rejson-4
            #     paths:
            #       - /tmp/cache/build/

            - run:
                name: Do this after checkout.
                command: |
                  cd /tmp/workspace/build/redis/modules/

            - run:
                name: Do this after checkout.
                command: |
                  ls
                  cp -r /tmp/workspace/build/* build/

      - test:
          requires:
            - docker-publish/publish

      # - build
      # - docker-publish/check
          # requires:
            # - lint

